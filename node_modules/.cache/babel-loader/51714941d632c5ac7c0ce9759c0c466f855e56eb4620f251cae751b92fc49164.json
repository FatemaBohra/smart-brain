{"ast":null,"code":"var _jsxFileName = \"/Users/fatemabohra/src/UniversityProjects/VisualCode/UdemyProject/facerecognitionbrain/src/App.js\";\nimport './App.css';\nimport React from 'react';\n// import Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\n\n// const app = new Clarifai.App({\n//   apiKey: 'd2f0fb8b781f4e73b589f91ff070a2b7'\n// })\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiRequestOptions = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = '739feb1cb0dc4987b9429e217a253f78';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'fatema';\n  const APP_ID = 'test';\n  // Change these to whatever model and image URL you want to use\n  // const MODEL_ID = 'face-detection';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      this.setState({\n        box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    //\"https://samples.clarifai.com/face-det.jpg\"\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      const MODEL_ID = 'face-detection';\n      // app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // .then(response => this.displayFaceBox(this.calculateFaceRecogntion(response)))\n      // .catch(err => console.log(err));\n      ///////////////////////\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", returnClarifaiRequestOptions(this.state.input)).then(response => response.json()).then(response => {\n        console.log('hi', response);\n        // if (response) {\n        //   fetch('https://localhost:3000/image', {\n        //     method: 'put',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify({\n        //       id: this.state.user.id\n        //     })\n        //   })\n        //     .then(response => response.json())\n        //     .then(count => {\n        //       this.setState(Object.assign(this.state.user, { entries: count }))\n        //     })\n        // }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl,\n        box: this.state.box\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Navigation","FaceRecognition","Logo","ImageLinkForm","Rank","ParticlesBg","jsxDEV","_jsxDEV","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","Component","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","value","onButtonSubmit","state","MODEL_ID","fetch","then","response","json","console","log","catch","err","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","bg"],"sources":["/Users/fatemabohra/src/UniversityProjects/VisualCode/UdemyProject/facerecognitionbrain/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\n// import Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\n\n// const app = new Clarifai.App({\n//   apiKey: 'd2f0fb8b781f4e73b589f91ff070a2b7'\n// })\n\nconst returnClarifaiRequestOptions = (imageUrl) => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = '739feb1cb0dc4987b9429e217a253f78';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'fatema';\n  const APP_ID = 'test';\n  // Change these to whatever model and image URL you want to use\n  // const MODEL_ID = 'face-detection';\n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [\n      {\n        \"data\": {\n          \"image\": {\n            \"url\": IMAGE_URL\n          }\n        }\n      }\n    ]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n\n  return requestOptions\n}\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({ box });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n  //\"https://samples.clarifai.com/face-det.jpg\"\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input })\n    const MODEL_ID = 'face-detection';\n    // app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    // .then(response => this.displayFaceBox(this.calculateFaceRecogntion(response)))\n    // .catch(err => console.log(err));\n    ///////////////////////\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n      .then(response => response.json())\n      .then(response => {\n        console.log('hi', response)\n        // if (response) {\n        //   fetch('https://localhost:3000/image', {\n        //     method: 'put',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify({\n        //       id: this.state.user.id\n        //     })\n        //   })\n        //     .then(response => response.json())\n        //     .then(count => {\n        //       this.setState(Object.assign(this.state.user, { entries: count }))\n        //     })\n        // }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n        <FaceRecognition imageUrl={this.state.imageUrl} box={this.state.box} />\n        <ParticlesBg type=\"cobweb\" bg={true} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}