{"ast":null,"code":"var _jsxFileName = \"/Users/fatemabohra/src/UniversityProjects/VisualCode/UdemyProject/facerecognitionbrain/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: 'cc696906ff0f43dbb2f95d756da0f74f'\n});\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n//   // Your PAT (Personal Access Token) can be found in the portal under Authentification\n//   const PAT = '739feb1cb0dc4987b9429e217a253f78';\n//   // Specify the correct user_id/app_id pairings\n//   // Since you're making inferences outside your app's scope\n//   const USER_ID = 'fatema';\n//   const APP_ID = 'my-first-application';\n//   // Change these to whatever model and image URL you want to use\n//   const MODEL_ID = 'face-detection';\n//   const IMAGE_URL = imageUrl;\n\n//   const raw = JSON.stringify({\n//     \"user_app_id\": {\n//       \"user_id\": USER_ID,\n//       \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//       {\n//         \"data\": {\n//           \"image\": {\n//             \"url\": IMAGE_URL\n//           }\n//         }\n//       }\n//     ]\n//   });\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//       'Accept': 'application/json',\n//       'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions\n// }\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.calculateFaceRecogntion = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    //\"https://samples.clarifai.com/face-det.jpg\"\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(function (response) {\n        console.log(response);\n      }, function (err) {\n        //err\n      });\n      /////////////////////////\n      // .then(response => this.displayFaceBox(this.calculateFaceRecogntion(response)))\n      // .catch(err => console.log(err));\n      /////////////////////////\n\n      // fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n      //   .then(response => response.json())\n      //   .then(response => {\n      //     console.log('hi', response)\n      //     if (response) {\n      //       fetch('https://localhost:3000/image', {\n      //         method: 'put',\n      //         headers: { 'Content-Type': 'application/json' },\n      //         body: JSON.stringify({\n      //           id: this.state.user.id\n      //         })\n      //       })\n      //         .then(response => response.json())\n      //         .then(count => {\n      //           this.setState(Object.assign(this.state.user, { entries: count }))\n      //         })\n      //     }\n      //     this.displayFaceBox(this.calculateFaceLocation(response))\n      //   })\n      //   .catch(err => console.log(err));\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: this.state.box,\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Clarifai","Navigation","FaceRecognition","Logo","ImageLinkForm","Rank","ParticlesBg","jsxDEV","_jsxDEV","app","App","apiKey","Component","constructor","calculateFaceRecogntion","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","value","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","err","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","bg"],"sources":["/Users/fatemabohra/src/UniversityProjects/VisualCode/UdemyProject/facerecognitionbrain/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\n\nconst app = new Clarifai.App({\n  apiKey: 'cc696906ff0f43dbb2f95d756da0f74f'\n})\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n//   // Your PAT (Personal Access Token) can be found in the portal under Authentification\n//   const PAT = '739feb1cb0dc4987b9429e217a253f78';\n//   // Specify the correct user_id/app_id pairings\n//   // Since you're making inferences outside your app's scope\n//   const USER_ID = 'fatema';\n//   const APP_ID = 'my-first-application';\n//   // Change these to whatever model and image URL you want to use\n//   const MODEL_ID = 'face-detection';\n//   const IMAGE_URL = imageUrl;\n\n//   const raw = JSON.stringify({\n//     \"user_app_id\": {\n//       \"user_id\": USER_ID,\n//       \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//       {\n//         \"data\": {\n//           \"image\": {\n//             \"url\": IMAGE_URL\n//           }\n//         }\n//       }\n//     ]\n//   });\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//       'Accept': 'application/json',\n//       'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions\n// }\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    }\n  }\n\n  calculateFaceRecogntion = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({ box: box });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n  //\"https://samples.clarifai.com/face-det.jpg\"\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input })\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(function (response) {\n      console.log(response);\n    }, function (err) {\n      //err\n    })\n    /////////////////////////\n    // .then(response => this.displayFaceBox(this.calculateFaceRecogntion(response)))\n    // .catch(err => console.log(err));\n    /////////////////////////\n\n    // fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n    //   .then(response => response.json())\n    //   .then(response => {\n    //     console.log('hi', response)\n    //     if (response) {\n    //       fetch('https://localhost:3000/image', {\n    //         method: 'put',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({\n    //           id: this.state.user.id\n    //         })\n    //       })\n    //         .then(response => response.json())\n    //         .then(count => {\n    //           this.setState(Object.assign(this.state.user, { entries: count }))\n    //         })\n    //     }\n    //     this.displayFaceBox(this.calculateFaceLocation(response))\n    //   })\n    //   .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\n        <ParticlesBg type=\"cobweb\" bg={true} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}